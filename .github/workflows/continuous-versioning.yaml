name: Continuous Versioning

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request_target:

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-version:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    outputs:
      buildVersion: ${{ steps.formatVersion.outputs.buildVersion }}
      tagTemplate: ${{ steps.tagTemplate.outputs.template }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Format version
        id: formatVersion
        run: |
          if [ "${{ steps.gitversion.outputs.CommitsSinceVersionSource }}" = 0 ]; then
            echo "buildVersion=${{ steps.gitversion.outputs.MajorMinorPatch }}" | tee $GITHUB_OUTPUT
          else
            echo "buildVersion=${{ steps.gitversion.outputs.MajorMinorPatch }}-rc${{ steps.gitversion.outputs.CommitsSinceVersionSource }}" | tee $GITHUB_OUTPUT
          fi

      - name: Format tag template
        id: tagTemplate
        run: |
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/\//-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c 1-7)

          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            echo "template=$IMAGE_NAME-{0}:$BRANCH_NAME-$SHORT_SHA" | tee $GITHUB_OUTPUT
          else
            if [ "${{ steps.gitversion.outputs.CommitsSinceVersionSource }}" = 0 ]; then
              echo "template=$IMAGE_NAME-{0}:latest, $IMAGE_NAME-{0}:${{ steps.gitversion.outputs.MajorMinorPatch }}" | tee $GITHUB_OUTPUT
            else
              echo "template=$IMAGE_NAME-{0}:${{ steps.gitversion.outputs.MajorMinorPatch }}-rc${{ steps.gitversion.outputs.CommitsSinceVersionSource }}" | tee $GITHUB_OUTPUT
            fi
          fi

  build-push:
    runs-on: ubuntu-latest

    needs: [determine-version]

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        service: ["frontend", "word-service"]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.0.2
        with:
          cosign-release: "v2.0.1"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: ./${{ matrix.service }}
          file: ./${{matrix.service}}/containers/Dockerfile
          tags: ${{ format(needs.determine-version.outputs.tagTemplate, matrix.service) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request_target' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ needs.determine-version.outputs.tags }}" | xargs -I {} cosign sign -y {}@${{ steps.build-and-push.outputs.digest }}

  bump-version:
    runs-on: ubuntu-latest

    needs: [determine-version]

    if: github.event_name == 'pull_request_target'

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Bump Version
        run: |
          sed -i "/\"version\":/c\  \"version\": \"${{ needs.determine-version.outputs.buildVersion }}\"," ./frontend/package.json
          sed -i "/\"version\":/c\  \"version\": \"${{ needs.determine-version.outputs.buildVersion }}\"," ./word-service/package.json
          sed -i "/appVersion:/c\appVersion: \'${{ needs.determine-version.outputs.buildVersion }}\'" ./frontend/containers/helm/chart/Chart.yaml
          sed -i "/appVersion:/c\appVersion: \'${{ needs.determine-version.outputs.buildVersion }}\'" ./word-service/containers/helm/chart/Chart.yaml

      - name: Commit Version Bump
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "build: [skip ci] bump version to ${{ needs.determine-version.outputs.buildVersion }}"
          commit_options: "-a"
          commit_author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
