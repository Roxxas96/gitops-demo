name: Continuous Versioning

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  bump-version:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    outputs:
      buildVersion: ${{ steps.formatVersion.outputs.buildVersion }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Format version
        id: formatVersion
        run: |
          if [ "${{ steps.gitversion.outputs.CommitsSinceVersionSource }}" = 0 ]; then
            echo "buildVersion=${{ steps.gitversion.outputs.MajorMinorPatch }}" | tee $GITHUB_OUTPUT
          else
            echo "buildVersion=${{ steps.gitversion.outputs.MajorMinorPatch }}-rc${{ steps.gitversion.outputs.CommitsSinceVersionSource }}" | tee $GITHUB_OUTPUT
          fi

      - name: Bump Version
        run: |
          sed -i "/\"version\":/c\  \"version\": \"${{ steps.formatVersion.outputs.buildVersion }}\"," frontend/package.json
          sed -i "/\"version\":/c\  \"version\": \"${{ steps.formatVersion.outputs.buildVersion }}\"," word-service/package.json
          sed -i "/appVersion:/c\appVersion: \'${{ steps.formatVersion.outputs.buildVersion }}\'" frontend/containers/helm/chart/Chart.yaml
          sed -i "/appVersion:/c\appVersion: \'${{ steps.formatVersion.outputs.buildVersion }}\'" word-service/containers/helm/chart/Chart.yaml

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: version-files
          path: |
            frontend/package.json
            word-service/package.json
            frontend/containers/helm/chart/Chart.yaml
            word-service/containers/helm/chart/Chart.yaml

  build-push:
    runs-on: ubuntu-latest

    needs: [bump-version]

    concurrency:
      group: "artifacts"
      cancel-in-progress: false

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        service: ["frontend", "word-service"]

    steps:
      - uses: actions/checkout@v3

      - name: Delete old version files
        run: |
          rm -f frontend/package.json
          rm -f word-service/package.json
          rm -f frontend/containers/helm/chart/Chart.yaml
          rm -f word-service/containers/helm/chart/Chart.yaml

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: version-files

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.0.2
        with:
          cosign-release: "v2.0.1"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Format tag template
        id: tags
        run: |
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/\//-/g')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c 1-7)

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tags=$IMAGE_NAME-${{ matrix.service }}:$BRANCH_NAME-$SHORT_SHA" | tee $GITHUB_OUTPUT
          else
            echo "tags=$IMAGE_NAME-${{ matrix.service }}:latest, $IMAGE_NAME-${{ matrix.service }}:${{ needs.bump-version.outputs.buildVersion }}" | tee $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: ${{ matrix.service }}
          file: ${{matrix.service}}/containers/Dockerfile
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.tags.outputs.tags }}" | xargs -I {} cosign sign -y {}@${{ steps.build-and-push.outputs.digest }}

  commit-version:
    runs-on: ubuntu-latest

    needs: [bump-version]

    if: github.ref == 'refs/heads/main'

    concurrency:
      group: "commit-version"
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.BOT_SSH_KEY }}

      - name: Delete old version files
        run: |
          rm -f frontend/package.json
          rm -f word-service/package.json
          rm -f frontend/containers/helm/chart/Chart.yaml
          rm -f word-service/containers/helm/chart/Chart.yaml

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: version-files

      - name: Commit Version Bump
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "build: [skip ci] bump version to ${{ needs.bump-version.outputs.buildVersion }}"
          commit_options: "-a"
          commit_author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
